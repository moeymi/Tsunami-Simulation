#pragma kernel ClearHashGrid
#pragma kernel RecalculateHashGrid
#pragma kernel RecalculateCollisionHashGrid
#pragma kernel BuildNeighbourList
#pragma kernel BuildCollisionNeighbourList
#pragma kernel ComputeForces
#pragma kernel ComputeCollisions
#pragma kernel Integrate
#include "UnityCG.cginc"


float CellSize;
int Dimensions;
bool TsunamiMode;
bool VolcanoMode;

struct Tri {
    float3 p0;
    float3 p1;
    float3 p2;
    float3 normal;
};


int3 GetCell(float3 position)
{
    return int3(position.x / CellSize, position.y / CellSize, position.z / CellSize);
}

int Hash(int3 cell)
{
    return cell.x + Dimensions * (cell.y + Dimensions * cell.z);
}
float3 Project(float3 a, float3 b) {
    float3 c = (dot(a, b) / pow(normalize(b), 2)) * b;
    return c;
}

bool PointInTriangle(Tri tri, float3 p)
{
    float3 c = cross(tri.p2 - tri.p0, tri.p2 - tri.p1);
    float triArea = length(c) / 2;
    float3 d1;
    float3 d2;
    float sumArea = 0;
    d1 = p - tri.p0;
    d2 = p - tri.p1;
    c = cross(d1, d2);
    sumArea += length(c) / 2;

    d1 = p - tri.p1;
    d2 = p - tri.p2;
    c = cross(d1, d2);
    sumArea += length(c) / 2;

    d1 = p - tri.p0;
    d2 = p - tri.p2;
    c = cross(d1, d2);
    sumArea += length(c) / 2;

    if (abs(sumArea - triArea) < 0.5f)
    {
        return true;
    }
    return false;
}

//Get the shortest distance between a point and a plane. The output is signed so it holds information
//as to which side of the plane normal the point is.
float SignedDistancePlanePoint(float3 planeNormal, float3 planePoint, float3 p) {
    return dot(planeNormal, (p - planePoint));
}

//create a vector of direction "vector" with length "size"
float3 SetVectorLength(float3 v, float size) {

    //normalize the vector
    float3 vectorNormalized = normalize(v);

    //scale the vector
    return vectorNormalized *= size;
}

float3 ProjectPointOnPlane(float3 planeNormal, float3 planePoint, float3 p) {

    float distance;
    float3 translationVector;

    //First calculate the distance from the point to the plane:
    distance = SignedDistancePlanePoint(planeNormal, planePoint, p);

    //Reverse the sign of the distance
    distance *= -1;

    //Get a translation vector
    translationVector = SetVectorLength(planeNormal, distance);

    //Translate the point to form a projection
    return p + translationVector;
}

RWStructuredBuffer<float3> _particles;
RWStructuredBuffer<float3> _prevParticles;
RWStructuredBuffer<float3> _duplicateParticles;
RWStructuredBuffer<Tri> _tris;
RWStructuredBuffer<float4> _colors;
RWStructuredBuffer<int> _neighbourList;
RWStructuredBuffer<int> _neighbourTracker;
RWStructuredBuffer<int> _neighbourCollisionList;
RWStructuredBuffer<int> _neighbourCollisionTracker;
RWStructuredBuffer<uint> _hashGrid;
RWStructuredBuffer<uint> _hashGridTracker;
RWStructuredBuffer<uint> _collisionHashGrid;
RWStructuredBuffer<uint> _collisionHashGridTracker;
RWStructuredBuffer<float> _densities;
RWStructuredBuffer<float> _pressures;
RWStructuredBuffer<float3> _velocities;
RWStructuredBuffer<float3> _forces;

int maximumParticlesPerCell;
float radius;  // particle radius
float radius2;
float radius3;
float radius4;
float radius5;
float mass;
float mass2;
float gasConstant;
float restDensity;
float viscosityCoefficient;
float damping;
float dt;
float3 g;
float epsilon;
float pi;
float k1;
float k2;
float k3;
float colorModifier;

float timer =0 ;

float4 surfaceColor;
float4 baseColor;

// Fake clear actually, only writes 0 to the hashGridTracker.
[numthreads(100,1,1)]
void ClearHashGrid(uint3 id : SV_DispatchThreadID)
{
    _hashGridTracker[id.x] = 0;
    // NeighbourTracker is (fake) cleared in the neighbour-list-building kernel
}

[numthreads(100,1,1)]
void RecalculateHashGrid(uint3 id : SV_DispatchThreadID)
{
    int previousCount = 0;
    const int cellHash = Hash(GetCell(_particles[id.x]));
    InterlockedAdd(_hashGridTracker[cellHash], 1, previousCount);
    if (previousCount >= maximumParticlesPerCell)
    {
        return;
    }
    _hashGrid[cellHash * maximumParticlesPerCell + previousCount] = id.x;
}

[numthreads(1, 1, 1)]
void RecalculateCollisionHashGrid(uint3 id : SV_DispatchThreadID)
{
    Tri tri = _tris[id.x];
    float distance1 = length(tri.p0 - tri.p1);
    float distance2 = length(tri.p1 - tri.p2);
    float distance3 = length(tri.p0 - tri.p2);
    if (distance1 > distance2 && distance1 > distance3)
    {
        int t1 = ceil(distance2 / (CellSize / 2));
        int t2 = ceil(distance3 / (CellSize / 2));
        for (int h = 0; h <= t1; h++)
        {
            for (int l = 0; l <= t2; l++)
            {
                float3 potentialCell = tri.p2 + (normalize(tri.p1 - tri.p2) * (CellSize/2) * h) + (normalize(tri.p0 - tri.p2) * (CellSize / 2) * l);
                if (potentialCell.x < 0) potentialCell.x = 0;
                if (potentialCell.y < 0) potentialCell.y = 0;
                if (potentialCell.z < 0) potentialCell.z = 0;
                if (PointInTriangle(tri, potentialCell)) {
                    int prevCount = 0;
                    const int cellHash = Hash(GetCell(potentialCell));
                    InterlockedAdd(_collisionHashGridTracker[cellHash], 1, prevCount);
                    _collisionHashGrid[cellHash * maximumParticlesPerCell + prevCount] = id.x;
                }
            }
        }
    }
    else if (distance2 > distance1 && distance2 > distance3)
    {
        int t1 = ceil(distance1 / (CellSize / 2));
        int t2 = ceil(distance3 / (CellSize / 2));
        for (int h = 0; h <= t1; h++)
        {
            for (int l = 0; l <= t2; l++)
            {
                float3 potentialCell = tri.p0 + (normalize(tri.p2 - tri.p0) * (CellSize / 2) * l) + (normalize(tri.p1 - tri.p0) * (CellSize / 2) * h);
                if (potentialCell.x < 0) potentialCell.x = 0;
                if (potentialCell.y < 0) potentialCell.y = 0;
                if (potentialCell.z < 0) potentialCell.z = 0;
                if (PointInTriangle(tri, potentialCell)) {
                    int prevCount = 0;
                    const int cellHash = Hash(GetCell(potentialCell));
                    InterlockedAdd(_collisionHashGridTracker[cellHash], 1, prevCount);
                    _collisionHashGrid[cellHash * maximumParticlesPerCell + prevCount] = id.x;
                }
            }
        }
    }
    else
    {
        int t1 = ceil(distance1 / (CellSize / 2));
        int t2 = ceil(distance2 / (CellSize / 2));
        int h = 0, l = 0;
        for (h = 0; h <= t1; h++)
        {
            for (l = 0; l <= t2; l++)
            {
                float3 potentialCell = tri.p1 + (normalize(tri.p2 - tri.p1) * (CellSize / 2) * l) + (normalize(tri.p0 - tri.p1) * (CellSize / 2) * h);
                if (potentialCell.x < 0) potentialCell.x = 0;
                if (potentialCell.y < 0) potentialCell.y = 0;
                if (potentialCell.z < 0) potentialCell.z = 0;
                if (PointInTriangle(tri, potentialCell)) {
                    int prevCount = 0;
                    const int cellHash = Hash(GetCell(potentialCell));
                    InterlockedAdd(_collisionHashGridTracker[cellHash], 1, prevCount);
                    _collisionHashGrid[cellHash * maximumParticlesPerCell + prevCount] = id.x;
                }
            }
        }
    }
}

void GetNearbyKeys(int3 originIndex, float3 position, out int nearbyKeys[8])
{
    int3 nearbyBucketIndices[8];
    for (int i = 0; i < 8; i++)
    {
        nearbyBucketIndices[i] = originIndex;
    }

    if (( originIndex.x + 0.5f ) * CellSize <= position.x)
    {
        nearbyBucketIndices[4].x += 1;
        nearbyBucketIndices[5].x += 1;
        nearbyBucketIndices[6].x += 1;
        nearbyBucketIndices[7].x += 1;
    }
    else
    {
        nearbyBucketIndices[4].x -= 1;
        nearbyBucketIndices[5].x -= 1;
        nearbyBucketIndices[6].x -= 1;
        nearbyBucketIndices[7].x -= 1;
    }

    if (( originIndex.y + 0.5f ) * CellSize <= position.y)
    {
        nearbyBucketIndices[2].y += 1;
        nearbyBucketIndices[3].y += 1;
        nearbyBucketIndices[6].y += 1;
        nearbyBucketIndices[7].y += 1;
    }
    else
    {
        nearbyBucketIndices[2].y -= 1;
        nearbyBucketIndices[3].y -= 1;
        nearbyBucketIndices[6].y -= 1;
        nearbyBucketIndices[7].y -= 1;
    }

    if (( originIndex.z + 0.5f ) * CellSize <= position.z)
    {
        nearbyBucketIndices[1].z += 1;
        nearbyBucketIndices[3].z += 1;
        nearbyBucketIndices[5].z += 1;
        nearbyBucketIndices[7].z += 1;
    }
    else
    {
        nearbyBucketIndices[1].z -= 1;
        nearbyBucketIndices[3].z -= 1;
        nearbyBucketIndices[5].z -= 1;
        nearbyBucketIndices[7].z -= 1;
    }

    for (int j = 0; j < 8; j++)
    {
        int3 cell = nearbyBucketIndices[j];
        if (cell.x < 0 || cell.x >= Dimensions || cell.y < 0 || cell.y >= Dimensions || cell.z < 0 || cell.z >= Dimensions)
        {
            nearbyKeys[j] = -1;
        }
        else
        {
            nearbyKeys[j] = Hash(nearbyBucketIndices[j]);
        }
    }
}

[numthreads(100,1,1)]
void BuildNeighbourList(uint3 id : SV_DispatchThreadID)
{
    _neighbourTracker[id.x] = 0;
    const int3 cell = GetCell(_particles[id.x]);
    int cells[8];
    GetNearbyKeys(cell, _particles[id.x], cells);

    for (uint j = 0; j < 8; j++)
    {
        if (cells[j] == -1) continue; // Grid does not contain cell.
        const uint numberOfParticlesInCell = min(_hashGridTracker[cells[j]], maximumParticlesPerCell); ;
        for (uint index = 0; index < numberOfParticlesInCell; index++)
        {
            const uint potentialNeighbour = _hashGrid[cells[j] * maximumParticlesPerCell + index];
            if (potentialNeighbour == id.x) continue;
            const float3 v = _particles[potentialNeighbour] - _particles[id.x];
            if (dot(v, v) < radius2) // Use squared length (= dot) instead of length for performance.
            {
                _neighbourList[id.x * maximumParticlesPerCell * 8 + _neighbourTracker[id.x]++] = potentialNeighbour;
            }
        }
    }
}
[numthreads(100, 1, 1)]
void BuildCollisionNeighbourList(uint3 id : SV_DispatchThreadID)
{
    _neighbourCollisionTracker[id.x] = 0;
    float3 dist = _particles[id.x] - _prevParticles[id.x];
    for (float i = 0; i < length(dist) / ((float)CellSize / 2); i++) {
        float3 pos = _prevParticles[id.x] + i * normalize(dist);
        const int3 cell = GetCell(pos);
        int cells[8];
        GetNearbyKeys(cell, pos, cells);

        for (uint j = 0; j < 8; j++)
        {
            if (cells[j] == -1) continue;
            const uint numberOfTrianglesInCell = _collisionHashGridTracker[cells[j]];
            for (uint index = 0; index < numberOfTrianglesInCell; index++)
            {
                const uint potentialNeighbour = _collisionHashGrid[cells[j] * maximumParticlesPerCell + index];
                float3 closestPoint = ProjectPointOnPlane(_tris[potentialNeighbour].normal, _tris[potentialNeighbour].p0, pos);
                if (length(closestPoint - pos) > radius / 2 || !PointInTriangle(_tris[potentialNeighbour], closestPoint))
                    continue;
                _neighbourCollisionList[id.x * maximumParticlesPerCell * 8 + _neighbourCollisionTracker[id.x]++] = potentialNeighbour;
            }
        }
    }
    const int3 cell = GetCell(_particles[id.x]);
    int cells[8];
    GetNearbyKeys(cell, _particles[id.x], cells);

    for (uint j = 0; j < 8; j++)
    {
        if (cells[j] == -1) continue;
        const uint numberOfTrianglesInCell = _collisionHashGridTracker[cells[j]];
        for (uint index = 0; index < numberOfTrianglesInCell; index++)
        {
            const uint potentialNeighbour = _collisionHashGrid[cells[j] * maximumParticlesPerCell + index];
            float3 closestPoint = ProjectPointOnPlane(_tris[potentialNeighbour].normal, _tris[potentialNeighbour].p0, _particles[id.x]);
            if (length(closestPoint - _particles[id.x]) > radius / 2 || !PointInTriangle(_tris[potentialNeighbour], closestPoint))
                continue;
            _neighbourCollisionList[id.x * maximumParticlesPerCell * 8 + _neighbourCollisionTracker[id.x]++] = potentialNeighbour;
        }
    }
}

float Poly6(float h)
{
    float coef = 315.f / (64.f * pi * pow(h, 9));
    return coef;
}

float GradientSpikey(float r, float h)
{
    if (h < r)
        return 0.f;
    float coef = 15.f / (pi * pow(h, 6));
    return coef * pow(h - r, 3);
}
float ViscosityLaplacian(float r, float h)
{
    if (h < r)
        return 0.f;

    float coef = 45.f / (pi * pow(h, 6));
    return coef * (h - r);
}

float3 VolcanoForces(float3 volcanoOrigin, float3 particlePosition, float volcanoRadius)
{

    float3 difference = particlePosition - volcanoOrigin;

    if (length(difference) > volcanoRadius)
        return float3(0,0,0);

    float3 volcanoForce = (normalize(difference)+ float3(0, 1, 0)) * 150 * clamp((1 - length(difference) / volcanoRadius), 0, 1);

    return volcanoForce;
}

float3 TsunamiForces(float3 position)
{

    float halfD = Dimensions / 2.0f;
    int quarter = 0;

    if (position.x > halfD) quarter++;
    if (position.y > halfD)
    {
        quarter++;
        if (position.x <= halfD)
            quarter++;
    }

    if (position.y < 1.5 && quarter != 0)
        return float3(0, 0, 0);

    float x_percentage = position.x / Dimensions;
    float y_percentage = position.y / Dimensions;

    switch (quarter)
    {
    case 0:
        return float3(20, 0, 0);
    case 1:
        return float3(10 * ( 1 - x_percentage) , 25 * x_percentage, 0);
    case 2:
        return  float3(-50 * x_percentage, -50 * y_percentage, 0);
    case 3:
        return  float3(200, -500 * (1-x_percentage), 0);
    }

    //if (quarter == 0)
    //{
    //    if (timer < 1.0f)
    //    {
    //        return float3(10, 0, 0);
    //    }
    //}

    //if (quarter == 1)
    //{
    //    if (timer < 1.0f)
    //    {
    //        return float3(0, 12, 0);
    //    }
    //    else
    //    {
    //        return float3(-10, 10, 0);
    //    }
    //}

    return float3(0, 0, 0);
}

[numthreads(100,1,1)]
void ComputeForces(uint3 id : SV_DispatchThreadID)
{
    float3 origin = _particles[id.x];
    float sum = 0.f;
    for (int j = 0; j < _neighbourTracker[id.x]; j++)
    {
        int neighbourIndex = _neighbourList[id.x * maximumParticlesPerCell * 8 + j];
        float dist = length(origin - _particles[neighbourIndex]);
        float distanceSqr = dist * dist;
        sum += k1 * pow(radius2 - distanceSqr, 3);
    }

    sum += k1 * pow(radius, 6);

    _densities[id.x] = sum;
    _pressures[id.x] = gasConstant * (_densities[id.x] - restDensity);

    _forces[id.x] = float3(0, 0, 0);
    for (int j = 0; j < _neighbourTracker[id.x]; j++)
    {
        const int neighbourIndex = _neighbourList[id.x * maximumParticlesPerCell * 8 + j];
        const float distance = length( _particles[id.x] - _particles[neighbourIndex] );
        if (distance > 0.0f)
        {
            const float3 direction = ( _particles[id.x] - _particles[neighbourIndex] );
            float3 normalizedDirection = normalize(direction);

            //Pressure 
            float3 pressureForce = k2 *(-direction) * (_pressures[id.x] + _pressures[neighbourIndex]) / (2 * _densities[neighbourIndex]) * pow((radius - distance), 2);
            _forces[id.x] += pressureForce;

            //Viscosity 
            float3 velocityDiff = _velocities[neighbourIndex] - _velocities[id.x];
            float3 viscoForce = k3 * (velocityDiff / _densities[neighbourIndex]) * (radius - distance);
            _forces[id.x] += viscoForce;
        }
    }
    // Gravity
    _forces[id.x] += g;
    if (TsunamiMode) {
        _forces[id.x] += TsunamiForces(_particles[id.x]);
    }
    if (VolcanoMode) {
        _forces[id.x] += VolcanoForces(float3(Dimensions/2,0, Dimensions/2),_particles[id.x] , Dimensions / 2);
    }
}

float Hash_From2D(float Vec, float time)
{
    float f = time + Vec * 37.70;
    return frac(sin(f) * 100.347);
}

[numthreads(100, 1, 1)]
void ComputeCollisions(uint3 id : SV_DispatchThreadID) {

    float3 acceleration = _forces[id.x] / _densities[id.x];
    _velocities[id.x] += acceleration * dt;
    for (int j = 0; j < _neighbourCollisionTracker[id.x]; j++)
    {
        const int neighbourIndex = _neighbourCollisionList[id.x * maximumParticlesPerCell * 8 + j];
        if (dot(_tris[neighbourIndex].normal, normalize(_velocities[id.x])) >= 0)
            continue;

        float collisionDamping = 1;
        float3 closestPoint = ProjectPointOnPlane(_tris[neighbourIndex].normal, _tris[neighbourIndex].p0, _particles[id.x]);
        float velocityTowardsCollider = dot(_velocities[id.x], normalize(closestPoint - _particles[id.x]));

        if (velocityTowardsCollider > 0.5f) collisionDamping *= 0.5f;

        float3 newVel = reflect(_velocities[id.x], _tris[neighbourIndex].normal);
        _velocities[id.x] = newVel;
    }
}

[numthreads(100,1,1)]
void Integrate(uint3 id : SV_DispatchThreadID)
{
    float3 newPos = _particles[id.x];
    newPos += dt * _velocities[id.x];

    if (newPos.x - epsilon < 0.0f)
    {
        if (_velocities[id.x].x < -1.5)
            _velocities[id.x].x *= damping;
        else
            _velocities[id.x].x *= -1;
        newPos.x = epsilon;
    }
    else if(newPos.x + epsilon > Dimensions - 1.f)
    {
        if (_velocities[id.x].x > 1.5)
            _velocities[id.x].x *= damping;
        else
            _velocities[id.x].x *= -1;
        newPos.x = Dimensions - 1 - epsilon;
    }
    if (newPos.y - epsilon < 0.0f)
    {
        if (_velocities[id.x].y < -1.5)
            _velocities[id.x].y *= damping;
        else
            _velocities[id.x].y *= -1;
        newPos.y = epsilon;
    }
    else if(newPos.y + epsilon > Dimensions - 1.f)
    {
        if (_velocities[id.x].y > 1.5)
            _velocities[id.x].y *= damping;
        else
            _velocities[id.x].y *= -1;
        newPos.y = Dimensions - 1 - epsilon;
    }
            
    if (newPos.z - epsilon < 0.0f)
    {
        if (_velocities[id.x].z < -1.5)
            _velocities[id.x].z *= damping;
        else
            _velocities[id.x].z *= -1;
        newPos.z = epsilon;
    }
    else if(_particles[id.x].z + epsilon > Dimensions - 1.f) 
    {
        if(_velocities[id.x].z > 1.5)
            _velocities[id.x].z *= damping;
        else
            _velocities[id.x].z *= -1;
        newPos.z = Dimensions - 1 - epsilon;
    }

    _prevParticles[id.x] = _particles[id.x];

    float colorEstimate = pow(abs(newPos.y / Dimensions), colorModifier);
    float4 newColor = lerp(baseColor, surfaceColor, colorEstimate);
    float4 oldColor = _colors[id.x];
    _colors[id.x * 3] = newColor;
    _colors[id.x * 3 + 1] = newColor;
    _colors[id.x * 3 + 2] = newColor;
    _particles[id.x] = newPos;
    float xrand = sin(Hash_From2D(id.x, _Time.x)) * 0.3;
    float yrand = sin(Hash_From2D(id.x, _Time.y)) * 0.3;
    float y2rand = cos(Hash_From2D(id.x, _Time.y)) * 0.3;
    float zrand = cos(Hash_From2D(id.x, _Time.z)) * 0.3;
    _duplicateParticles[id.x * 3] = newPos;
    _duplicateParticles[id.x * 3 + 1] = newPos + float3(xrand, yrand, zrand);
    _duplicateParticles[id.x * 3 + 2] = newPos + float3(-xrand, y2rand, -zrand);
}