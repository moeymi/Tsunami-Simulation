#pragma kernel ClearHashGrid
#pragma kernel RecalculateHashGrid
#pragma kernel BuildNeighbourList
#pragma kernel ComputeDensityPressure
#pragma kernel ComputeForces
#pragma kernel Integrate

float CellSize;
int Dimensions;

int3 GetCell(float3 position)
{
    return int3(position.x / CellSize, position.y / CellSize, position.z / CellSize);
}

int Hash(int3 cell)
{
    return cell.x + Dimensions * (cell.y + Dimensions * cell.z);
}

RWStructuredBuffer<float3> _particles;
RWStructuredBuffer<int> _neighbourList;
RWStructuredBuffer<int> _neighbourTracker;
RWStructuredBuffer<uint> _hashGrid;
RWStructuredBuffer<uint> _hashGridTracker;
RWStructuredBuffer<float> _densities;
RWStructuredBuffer<float> _pressures;
RWStructuredBuffer<float3> _velocities;
RWStructuredBuffer<float3> _forces;

int maximumParticlesPerCell;
float radius;  // particle radius
float radius2;
float radius3;
float radius4;
float radius5;
float mass;
float mass2;
float gasConstant;
float restDensity;
float viscosityCoefficient;
float damping;
float dt;
float3 g;
float epsilon;
float pi;
float k1;
float k2;
float k3;

// Fake clear actually, only writes 0 to the hashGridTracker.
[numthreads(100,1,1)]
void ClearHashGrid(uint3 id : SV_DispatchThreadID)
{
    _hashGridTracker[id.x] = 0;
    // NeighbourTracker is (fake) cleared in the neighbour-list-building kernel
}

[numthreads(100,1,1)]
void RecalculateHashGrid(uint3 id : SV_DispatchThreadID)
{
    int previousCount = 0;
    const int cellHash = Hash(GetCell(_particles[id.x]));
    InterlockedAdd(_hashGridTracker[cellHash], 1, previousCount);
    if (previousCount >= maximumParticlesPerCell)
    {
        return;
    }
    _hashGrid[cellHash * maximumParticlesPerCell + previousCount] = id.x;
}

void GetNearbyKeys(int3 originIndex, float3 position, out int nearbyKeys[8])
{
    int3 nearbyBucketIndices[8];
    for (int i = 0; i < 8; i++)
    {
        nearbyBucketIndices[i] = originIndex;
    }

    if (( originIndex.x + 0.5f ) * CellSize <= position.x)
    {
        nearbyBucketIndices[4].x += 1;
        nearbyBucketIndices[5].x += 1;
        nearbyBucketIndices[6].x += 1;
        nearbyBucketIndices[7].x += 1;
    }
    else
    {
        nearbyBucketIndices[4].x -= 1;
        nearbyBucketIndices[5].x -= 1;
        nearbyBucketIndices[6].x -= 1;
        nearbyBucketIndices[7].x -= 1;
    }

    if (( originIndex.y + 0.5f ) * CellSize <= position.y)
    {
        nearbyBucketIndices[2].y += 1;
        nearbyBucketIndices[3].y += 1;
        nearbyBucketIndices[6].y += 1;
        nearbyBucketIndices[7].y += 1;
    }
    else
    {
        nearbyBucketIndices[2].y -= 1;
        nearbyBucketIndices[3].y -= 1;
        nearbyBucketIndices[6].y -= 1;
        nearbyBucketIndices[7].y -= 1;
    }

    if (( originIndex.z + 0.5f ) * CellSize <= position.z)
    {
        nearbyBucketIndices[1].z += 1;
        nearbyBucketIndices[3].z += 1;
        nearbyBucketIndices[5].z += 1;
        nearbyBucketIndices[7].z += 1;
    }
    else
    {
        nearbyBucketIndices[1].z -= 1;
        nearbyBucketIndices[3].z -= 1;
        nearbyBucketIndices[5].z -= 1;
        nearbyBucketIndices[7].z -= 1;
    }

    for (int j = 0; j < 8; j++)
    {
        int3 cell = nearbyBucketIndices[j];
        if (cell.x < 0 || cell.x >= Dimensions || cell.y < 0 || cell.y >= Dimensions || cell.z < 0 || cell.z >= Dimensions)
        {
            nearbyKeys[j] = -1;
        }
        else
        {
            nearbyKeys[j] = Hash(nearbyBucketIndices[j]);
        }
    }
}

[numthreads(100,1,1)]
void BuildNeighbourList(uint3 id : SV_DispatchThreadID)
{
    _neighbourTracker[id.x] = 0;
    const int3 cell = GetCell(_particles[id.x]);
    int cells[8];
    GetNearbyKeys(cell, _particles[id.x], cells);

    for (uint j = 0; j < 8; j++)
    {
        if (cells[j] == -1) continue; // Grid does not contain cell.
        const uint numberOfParticlesInCell = min(_hashGridTracker[cells[j]], maximumParticlesPerCell); ;
        for (uint index = 0; index < numberOfParticlesInCell; index++)
        {
            const uint potentialNeighbour = _hashGrid[cells[j] * maximumParticlesPerCell + index];
            if (potentialNeighbour == id.x) continue;
            const float3 v = _particles[potentialNeighbour] - _particles[id.x];
            if (dot(v, v) < radius2) // Use squared length (= dot) instead of length for performance.
            {
                _neighbourList[id.x * maximumParticlesPerCell * 8 + _neighbourTracker[id.x]++] = potentialNeighbour;
            }
        }
    }
    // n. The Neighbouring-list should be n-particles big, each index containing a list of each particles neighbours in radius r.
}

float Poly6(float h)
{
    float coef = 315.f / (64.f * pi * pow(h, 9));
    return coef;
}

float GradientSpikey(float r, float h)
{
    if (h < r)
        return 0.f;
    float coef = 15.f / (pi * pow(h, 6));
    return coef * pow(h - r, 3);
}
float ViscosityLaplacian(float r, float h)
{
    if (h < r)
        return 0.f;

    float coef = 45.f / (pi * pow(h, 6));
    return coef * (h - r);
}

[numthreads(100,1,1)]
void ComputeDensityPressure(uint3 id : SV_DispatchThreadID)
{
    float3 origin = _particles[id.x];
    float sum = 0.f;
    for (int j = 0; j < _neighbourTracker[id.x]; j++)
    {
        int neighbourIndex = _neighbourList[id.x * maximumParticlesPerCell * 8 + j];
        float dist = length(origin - _particles[neighbourIndex]);
        float distanceSqr = dist * dist;
        sum += k1 * pow(radius2 - distanceSqr , 3);
    }

    _densities[id.x] = sum;

    // Compute pressure based on density
    _pressures[id.x] = gasConstant * (_densities[id.x] - restDensity);
}

[numthreads(100,1,1)]
void ComputeForces(uint3 id : SV_DispatchThreadID)
{
    _forces[id.x] = float3(0, 0, 0);
    for (int j = 0; j < _neighbourTracker[id.x]; j++)
    {
        const int neighbourIndex = _neighbourList[id.x * maximumParticlesPerCell * 8 + j];
        const float distance = length( _particles[id.x] - _particles[neighbourIndex] );
        if (distance > 0.0f)
        {
            const float3 direction = ( _particles[id.x] - _particles[neighbourIndex] );
            float3 normalizedDirection = normalize(direction);

            //Pressure 
            float3 pressureForce = k2 *(-direction) * (_pressures[id.x] + _pressures[neighbourIndex]) / (2 * _densities[neighbourIndex]) * pow((radius - distance), 2);
            _forces[id.x] += pressureForce;

            //Viscosity 
            float3 velocityDiff = _velocities[neighbourIndex] - _velocities[id.x];
            float3 viscoForce = k3 * (velocityDiff / _densities[neighbourIndex]) * (radius - distance);
            _forces[id.x] += viscoForce;
        }
    }
    // Gravity
    _forces[id.x] += g;
}

[numthreads(100,1,1)]
void Integrate(uint3 id : SV_DispatchThreadID)
{
    // forward Euler integration
    float3 acceleration = _forces[id.x] / _densities[id.x];
    _velocities[id.x] += acceleration * dt;

    //velocities[i] += Time.deltaTime * forces[i] / mass;

    float3 newPos = _particles[id.x];
    newPos += dt * _velocities[id.x];

    if (newPos.x - epsilon < 0.0f)
    {
        _velocities[id.x].x *= damping;
        newPos.x = epsilon;
    }
    else if(newPos.x + epsilon > Dimensions - 1.f)
    {
        _velocities[id.x].x *= damping;
        newPos.x = Dimensions - 1 - epsilon;
    }
            
    if (newPos.y - epsilon < 0.0f)
    {
        _velocities[id.x].y *= damping;
        newPos.y = epsilon;
    }
    else if(newPos.y + epsilon > Dimensions - 1.f)
    {
        _velocities[id.x].y *= damping;
        newPos.y = Dimensions - 1 - epsilon;
    }
            
    if (newPos.z - epsilon < 0.0f)
    {
        _velocities[id.x].z *= damping;
        newPos.z = epsilon;
    }
    else if(_particles[id.x].z + epsilon > Dimensions - 1.f) 
    {
        _velocities[id.x].z *= damping;
        newPos.z = Dimensions - 1 - epsilon;
    }
    _particles[id.x] = newPos;
}



